name: Git Risk Assessment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  INFLUXDB_URL: http://localhost:8086
  INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN }}
  INFLUXDB_ORG: my-org
  INFLUXDB_BUCKET: risk_assessment

jobs:
  assess-risk:
    runs-on: ubuntu-latest
    
    services:
      influxdb:
        image: influxdb:2.7
        ports:
          - 8086:8086
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: adminadmin
          DOCKER_INFLUXDB_INIT_ORG: my-org
          DOCKER_INFLUXDB_INIT_BUCKET: risk_assessment
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: my-super-secret-auth-token

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # 获取完整的git历史
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 显示安装的包版本
        pip freeze
        
    - name: Check directory structure
      run: |
        echo "当前工作目录:"
        pwd
        echo "目录结构:"
        ls -R
        
    - name: Get changed files
      id: changed-files
      run: |
        echo "获取变更文件..."
        git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
        echo "变更文件列表:"
        cat changed_files.txt
        
    - name: Setup services
      run: |
        echo "设置 InfluxDB..."
        # 等待 InfluxDB 启动
        timeout 30 bash -c 'until curl -s http://localhost:8086/ping; do sleep 1; done'
        
        echo "启动 AI 推理服务..."
        cd ai_infer_service
        # 检查目录内容
        ls -la
        python -m uvicorn main:app --host 0.0.0.0 --port 8001 &
        
        echo "启动 LIME 解释服务..."
        cd ../lime_explain_service
        # 检查目录内容
        ls -la
        python -m uvicorn main:app --host 0.0.0.0 --port 8002 &
        
        # 等待服务启动
        sleep 10
        
        # 检查服务是否正常运行
        curl -s http://localhost:8001/health || echo "AI 推理服务未正常运行"
        curl -s http://localhost:8002/health || echo "LIME 解释服务未正常运行"
        
    - name: Run risk assessment
      run: |
        echo "开始风险评估..."
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "正在评估文件: $file"
            diff_content=$(git diff ${{ github.event.before }} ${{ github.sha }} -- "$file")
            echo "Diff 内容:"
            echo "$diff_content"
            
            # 调用风险评估服务
            response=$(curl -s -X POST http://localhost:8001/predict \
              -H "Content-Type: application/json" \
              -d "{\"diff_content\": \"$diff_content\"}")
            echo "评估结果:"
            echo "$response"
          fi
        done < changed_files.txt
      
    - name: Generate risk report
      run: |
        echo "生成风险评估报告..."
        echo "## 风险评估报告" > risk_report.md
        echo "### 评估时间: $(date)" >> risk_report.md
        echo "### 变更文件列表:" >> risk_report.md
        cat changed_files.txt >> risk_report.md
        echo "" >> risk_report.md
        echo "### 详细评估结果:" >> risk_report.md
        
        echo "查询 InfluxDB..."
        influx query 'from(bucket:"risk_assessment")
          |> range(start: -1h)
          |> filter(fn: (r) => r._measurement == "risk_assessment")
          |> last()' >> risk_report.md || echo "InfluxDB 查询失败"
          
    - name: Upload risk report
      uses: actions/upload-artifact@v2
      with:
        name: risk-assessment-report
        path: risk_report.md 