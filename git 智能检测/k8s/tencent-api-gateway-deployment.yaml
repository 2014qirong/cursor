# 腾讯云原生API网关 Kubernetes 部署配置
# 基于Kong网关的容器化部署

apiVersion: v1
kind: Namespace
metadata:
  name: api-gateway
  labels:
    name: api-gateway
    environment: production
    managed-by: terraform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: api-gateway
  labels:
    app: kong
    component: config
data:
  kong.conf: |
    # Kong配置文件
    database = postgres
    pg_host = postgres-service.api-gateway.svc.cluster.local
    pg_port = 5432
    pg_database = kong
    pg_user = kong
    pg_password = kong_password
    
    # 代理配置
    proxy_listen = 0.0.0.0:8000
    proxy_listen_ssl = 0.0.0.0:8443
    admin_listen = 0.0.0.0:8001
    admin_listen_ssl = 0.0.0.0:8444
    
    # 日志配置
    log_level = info
    access_log = /dev/stdout
    error_log = /dev/stderr
    
    # 插件配置
    plugins = bundled,rate-limiting,cors,jwt,oauth2,acl,basic-auth,key-auth,ldap-auth,hmac-auth,ip-restriction,request-size-limiting,file-log,http-log,tcp-log,udp-log,response-transformer,request-transformer,correlation-id,statsd,datadog,runscope,galileo,mashape-analytics,prometheus
    
    # 性能配置
    nginx_worker_processes = auto
    nginx_daemon = off
    mem_cache_size = 128m
    
    # 安全配置
    real_ip_header = X-Forwarded-For
    real_ip_recursive = on
    trusted_ips = 0.0.0.0/0,::/0

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: api-gateway
type: Opaque
data:
  # base64编码的密码
  postgres-password: a29uZ19wYXNzd29yZA==  # kong_password
  postgres-user: a29uZw==  # kong

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: api-gateway
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ssd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: api-gateway
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:13-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: kong
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: api-gateway
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migration
  namespace: api-gateway
  labels:
    app: kong
    component: migration
spec:
  template:
    metadata:
      labels:
        app: kong
        component: migration
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kong-migration
        image: kong:2.8.1-alpine
        command: ["kong", "migrations", "bootstrap"]
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: postgres-service.api-gateway.svc.cluster.local
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_DATABASE
          value: kong
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-gateway
  namespace: api-gateway
  labels:
    app: kong
    component: gateway
    version: v2.8.1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: kong
      component: gateway
  template:
    metadata:
      labels:
        app: kong
        component: gateway
        version: v2.8.1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kong-serviceaccount
      containers:
      - name: kong
        image: kong:2.8.1-alpine
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-ssl
          containerPort: 8444
          protocol: TCP
        - name: metrics
          containerPort: 8100
          protocol: TCP
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: postgres-service.api-gateway.svc.cluster.local
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_DATABASE
          value: kong
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000"
        - name: KONG_PROXY_LISTEN_SSL
          value: "0.0.0.0:8443"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_ADMIN_LISTEN_SSL
          value: "0.0.0.0:8444"
        - name: KONG_LOG_LEVEL
          value: info
        - name: KONG_PLUGINS
          value: "bundled,prometheus"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_MEM_CACHE_SIZE
          value: "128m"
        - name: KONG_REAL_IP_HEADER
          value: "X-Forwarded-For"
        - name: KONG_REAL_IP_RECURSIVE
          value: "on"
        - name: KONG_TRUSTED_IPS
          value: "0.0.0.0/0,::/0"
        volumeMounts:
        - name: kong-config
          mountPath: /etc/kong
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "kong quit"]
      volumes:
      - name: kong-config
        configMap:
          name: kong-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kong
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-serviceaccount
  namespace: api-gateway
  labels:
    app: kong

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kong-clusterrole
  labels:
    app: kong
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kong-clusterrolebinding
  labels:
    app: kong
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-clusterrole
subjects:
- kind: ServiceAccount
  name: kong-serviceaccount
  namespace: api-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: api-gateway
  labels:
    app: kong
    component: proxy
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: kong
    component: gateway
  ports:
  - name: proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: proxy-ssl
    port: 443
    targetPort: 8443
    protocol: TCP
  sessionAffinity: None
  externalTrafficPolicy: Local

---
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: api-gateway
  labels:
    app: kong
    component: admin
spec:
  type: ClusterIP
  selector:
    app: kong
    component: gateway
  ports:
  - name: admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: admin-ssl
    port: 8444
    targetPort: 8444
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: kong-metrics
  namespace: api-gateway
  labels:
    app: kong
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8100"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: kong
    component: gateway
  ports:
  - name: metrics
    port: 8100
    targetPort: 8100
    protocol: TCP

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kong-pdb
  namespace: api-gateway
  labels:
    app: kong
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: kong
      component: gateway

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kong-hpa
  namespace: api-gateway
  labels:
    app: kong
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kong-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max