diff --git a/cmd/kube-apiserver/app/server.go b/cmd/kube-apiserver/app/server.go
index 042ddc9714a09..61ef5e90a6e62 100644
--- a/cmd/kube-apiserver/app/server.go
+++ b/cmd/kube-apiserver/app/server.go
@@ -110,6 +110,8 @@ cluster's shared state through which all other components interact.`,
 			}
 			// add feature enablement metrics
 			featureGate.(featuregate.MutableFeatureGate).AddMetrics()
+			// add component version metrics
+			s.GenericServerRunOptions.ComponentGlobalsRegistry.AddMetrics()
 			return Run(ctx, completedOptions)
 		},
 		Args: func(cmd *cobra.Command, args []string) error {
diff --git a/cmd/kube-controller-manager/app/controllermanager.go b/cmd/kube-controller-manager/app/controllermanager.go
index fea90182b2605..ce6b43fee0d41 100644
--- a/cmd/kube-controller-manager/app/controllermanager.go
+++ b/cmd/kube-controller-manager/app/controllermanager.go
@@ -144,6 +144,8 @@ controller, and serviceaccounts controller.`,
 			// add feature enablement metrics
 			fg := s.ComponentGlobalsRegistry.FeatureGateFor(basecompatibility.DefaultKubeComponent)
 			fg.(featuregate.MutableFeatureGate).AddMetrics()
+			// add component version metrics
+			s.ComponentGlobalsRegistry.AddMetrics()
 			return Run(ctx, c.Complete())
 		},
 		Args: func(cmd *cobra.Command, args []string) error {
diff --git a/cmd/kube-scheduler/app/server.go b/cmd/kube-scheduler/app/server.go
index c9ab27027cf96..bf5a3077552d0 100644
--- a/cmd/kube-scheduler/app/server.go
+++ b/cmd/kube-scheduler/app/server.go
@@ -160,6 +160,9 @@ func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Op
 	}
 	// add feature enablement metrics
 	fg.(featuregate.MutableFeatureGate).AddMetrics()
+	// add component version metrics
+	opts.ComponentGlobalsRegistry.AddMetrics()
+
 	return Run(ctx, cc, sched)
 }
 
diff --git a/staging/src/k8s.io/component-base/compatibility/registry.go b/staging/src/k8s.io/component-base/compatibility/registry.go
index cdff77b07ecce..ceb52f2142fa8 100644
--- a/staging/src/k8s.io/component-base/compatibility/registry.go
+++ b/staging/src/k8s.io/component-base/compatibility/registry.go
@@ -17,6 +17,7 @@ limitations under the License.
 package compatibility
 
 import (
+	"context"
 	"fmt"
 	"sort"
 	"strings"
@@ -27,6 +28,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/version"
 	cliflag "k8s.io/component-base/cli/flag"
 	"k8s.io/component-base/featuregate"
+	"k8s.io/component-base/metrics/prometheus/compatversion"
 	"k8s.io/klog/v2"
 )
 
@@ -89,6 +91,8 @@ type ComponentGlobalsRegistry interface {
 	// and cannot be set from cmd flags anymore.
 	// For a given component, its emulation version can only depend on one other component, no multiple dependency is allowed.
 	SetEmulationVersionMapping(fromComponent, toComponent string, f VersionMapping) error
+	// AddMetrics adds metrics for the emulation version of a component.
+	AddMetrics()
 }
 
 type componentGlobalsRegistry struct {
@@ -117,6 +121,16 @@ func NewComponentGlobalsRegistry() *componentGlobalsRegistry {
 	}
 }
 
+func (r *componentGlobalsRegistry) AddMetrics() {
+	for name, globals := range r.componentGlobals {
+		effectiveVersion := globals.effectiveVersion
+		if effectiveVersion == nil {
+			continue
+		}
+		compatversion.RecordCompatVersionInfo(context.Background(), name, effectiveVersion.BinaryVersion().String(), effectiveVersion.EmulationVersion().String(), effectiveVersion.MinCompatibilityVersion().String())
+	}
+}
+
 func (r *componentGlobalsRegistry) Reset() {
 	r.mutex.Lock()
 	defer r.mutex.Unlock()
diff --git a/staging/src/k8s.io/component-base/compatibility/registry_test.go b/staging/src/k8s.io/component-base/compatibility/registry_test.go
index 90c7bd8aaac29..b95c6e4c745b1 100644
--- a/staging/src/k8s.io/component-base/compatibility/registry_test.go
+++ b/staging/src/k8s.io/component-base/compatibility/registry_test.go
@@ -26,6 +26,8 @@ import (
 	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
 	"k8s.io/apimachinery/pkg/util/version"
 	"k8s.io/component-base/featuregate"
+	"k8s.io/component-base/metrics/legacyregistry"
+	"k8s.io/component-base/metrics/testutil"
 )
 
 const (
@@ -444,6 +446,30 @@ func TestVersionMappingWithCyclicDependency(t *testing.T) {
 	}
 }
 
+func TestAddMetrics(t *testing.T) {
+	r := NewComponentGlobalsRegistry()
+	ver1 := NewEffectiveVersionFromString("0.58", "", "")
+	ver2 := NewEffectiveVersionFromString("1.2", "1.1", "")
+
+	if err := r.Register("comp1", ver1, nil); err != nil {
+		t.Fatalf("expected no error to register new component, but got err: %v", err)
+	}
+	if err := r.Register("comp2", ver2, nil); err != nil {
+		t.Fatalf("expected no error to register new component, but got err: %v", err)
+	}
+	r.AddMetrics()
+
+	expectedOutput := `# HELP version_info [ALPHA] Provides the compatibility version info of the component. The component label is the name of the component, usually kube, but is relevant for aggregated-apiservers.
+    # TYPE version_info gauge
+    version_info{binary="0.58",component="comp1",emulation="0.58",min_compat="0.57"} 1
+    version_info{binary="1.2",component="comp2",emulation="1.2",min_compat="1.1"} 1
+`
+	testedMetrics := []string{"version_info"}
+	if err := testutil.GatherAndCompare(legacyregistry.DefaultGatherer, strings.NewReader(expectedOutput), testedMetrics...); err != nil {
+		t.Fatal(err)
+	}
+}
+
 func assertVersionEqualTo(t *testing.T, ver *version.Version, expectedVer string) {
 	if ver.EqualTo(version.MustParse(expectedVer)) {
 		return
diff --git a/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics.go b/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics.go
new file mode 100644
index 0000000000000..eec1c4d012fab
--- /dev/null
+++ b/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics.go
@@ -0,0 +1,50 @@
+/*
+Copyright 2025 The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package compatversion
+
+import (
+	"context"
+
+	k8smetrics "k8s.io/component-base/metrics"
+	"k8s.io/component-base/metrics/legacyregistry"
+)
+
+var (
+	// compatVersionInfo is a Prometheus Gauge metrics used for recording the current emulation and binary version of a component.
+	compatVersionInfo = k8smetrics.NewGaugeVec(
+		&k8smetrics.GaugeOpts{
+			Name: "version_info",
+			Help: "Provides the compatibility version info of the component. " +
+				"The component label is the name of the component, usually kube, " +
+				"but is relevant for aggregated-apiservers.",
+			StabilityLevel: k8smetrics.ALPHA,
+		},
+		[]string{"component", "binary", "emulation", "min_compat"},
+	)
+)
+
+func ResetCompatVersionInfoMetric() {
+	compatVersionInfo.Reset()
+}
+
+func RecordCompatVersionInfo(ctx context.Context, component, binary, emulation, minCompat string) {
+	compatVersionInfo.WithContext(ctx).WithLabelValues(component, binary, emulation, minCompat).Set(1)
+}
+
+func init() {
+	legacyregistry.MustRegister(compatVersionInfo)
+}
diff --git a/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics_test.go b/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics_test.go
new file mode 100644
index 0000000000000..63b4be6fc98ba
--- /dev/null
+++ b/staging/src/k8s.io/component-base/metrics/prometheus/compatversion/metrics_test.go
@@ -0,0 +1,41 @@
+/*
+Copyright 2025 The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package compatversion
+
+import (
+	"context"
+	"strings"
+	"testing"
+
+	"k8s.io/component-base/metrics/legacyregistry"
+	"k8s.io/component-base/metrics/testutil"
+)
+
+var (
+	testedMetrics = []string{"version_info"}
+)
+
+func TestRecordCompatVersionInfo(t *testing.T) {
+	RecordCompatVersionInfo(context.Background(), "name", "1.28", "1.27", "1.26")
+	want := `# HELP version_info [ALPHA] Provides the compatibility version info of the component. The component label is the name of the component, usually kube, but is relevant for aggregated-apiservers.
+    # TYPE version_info gauge
+    version_info{binary="1.28",component="name",emulation="1.27",min_compat="1.26"} 1
+`
+	if err := testutil.GatherAndCompare(legacyregistry.DefaultGatherer, strings.NewReader(want), testedMetrics...); err != nil {
+		t.Fatal(err)
+	}
+}
