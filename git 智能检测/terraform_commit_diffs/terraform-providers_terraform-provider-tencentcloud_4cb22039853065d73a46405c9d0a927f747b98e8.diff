diff --git a/CHANGELOG.md b/CHANGELOG.md
index 894695d13b..958922c1a0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,6 +8,8 @@ ENHANCEMENTS:
 
 * Data Source: `tencentcloud_images` supports list of snapshots.
 * Resource: `tencentcloud_kubernetes_cluster_attachment` add new argument `worker_config` to support config with existing instances.
+* Resource: `tencentcloud_ccn` add new argument `tags` to support tags settings..
+* Resource `tencentcloud_cfs_file_system` add new argument `tags` to support tags settings.
 
 ## 1.38.2 (July 03, 2020)
 
diff --git a/tencentcloud/common.go b/tencentcloud/common.go
index 9c5179c9cd..1eb6aff0a3 100644
--- a/tencentcloud/common.go
+++ b/tencentcloud/common.go
@@ -191,7 +191,7 @@ func CheckNil(object interface{}, fields map[string]string) (nilFields []string)
 	return
 }
 
-// BuildTagResourceName builds the Tencent Clould specific name of a resource description.
+// BuildTagResourceName builds the Tencent Cloud specific name of a resource description.
 // The format is `qcs:project_id:service_type:region:account:resource`.
 // For more information, go to https://cloud.tencent.com/document/product/598/10606.
 func BuildTagResourceName(serviceType, resourceType, region, id string) string {
diff --git a/tencentcloud/data_source_tc_cfs_file_systems_test.go b/tencentcloud/data_source_tc_cfs_file_systems_test.go
index a98cc59a90..d1bf9e5ca2 100644
--- a/tencentcloud/data_source_tc_cfs_file_systems_test.go
+++ b/tencentcloud/data_source_tc_cfs_file_systems_test.go
@@ -44,7 +44,7 @@ resource "tencentcloud_subnet" "subnet" {
 }
 
 resource "tencentcloud_cfs_access_group" "foo" {
-  name = "test_cfs_access_rule"
+	name = "test_cfs_access_rule"
 }
 
 resource "tencentcloud_cfs_file_system" "foo" {
diff --git a/tencentcloud/resource_tc_as_scaling_group.go b/tencentcloud/resource_tc_as_scaling_group.go
index de8fa30823..47d14948b1 100644
--- a/tencentcloud/resource_tc_as_scaling_group.go
+++ b/tencentcloud/resource_tc_as_scaling_group.go
@@ -303,15 +303,6 @@ func resourceTencentCloudAsScalingGroupCreate(d *schema.ResourceData, meta inter
 		}
 	}
 
-	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
-		for k, v := range tags {
-			request.Tags = append(request.Tags, &as.Tag{
-				Key:   helper.String(k),
-				Value: helper.String(v),
-			})
-		}
-	}
-
 	var id string
 	if err := resource.Retry(writeRetryTimeout, func() *resource.RetryError {
 		ratelimit.Check(request.GetAction())
@@ -357,6 +348,15 @@ func resourceTencentCloudAsScalingGroupCreate(d *schema.ResourceData, meta inter
 		return err
 	}
 
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("as", "auto-scaling-group", tcClient.Region, d.Id())
+		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
+			return err
+		}
+	}
+
 	return resourceTencentCloudAsScalingGroupRead(d, meta)
 }
 
@@ -431,10 +431,13 @@ func resourceTencentCloudAsScalingGroupRead(d *schema.ResourceData, meta interfa
 		_ = d.Set("forward_balancer_ids", forwardLoadBalancers)
 	}
 
-	tags := make(map[string]string, len(scalingGroup.Tags))
-	for _, tag := range scalingGroup.Tags {
-		tags[*tag.Key] = *tag.Value
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "as", "auto-scaling-group", tcClient.Region, d.Id())
+	if err != nil {
+		return err
 	}
+
 	_ = d.Set("tags", tags)
 
 	return nil
@@ -606,14 +609,14 @@ func resourceTencentCloudAsScalingGroupUpdate(d *schema.ResourceData, meta inter
 	}
 
 	if d.HasChange("tags") {
-		oldTags, newTags := d.GetChange("tags")
-		replaceTags, deleteTags := diffTags(oldTags.(map[string]interface{}), newTags.(map[string]interface{}))
+		oldValue, newValue := d.GetChange("tags")
+		replaceTags, deleteTags := diffTags(oldValue.(map[string]interface{}), newValue.(map[string]interface{}))
 
-		resourceName := BuildTagResourceName("as", "auto-scaling-group", region, scalingGroupId)
-		if err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags); err != nil {
+		resourceName := BuildTagResourceName("as", "auto-scaling-group", region, d.Id())
+		err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags)
+		if err != nil {
 			return err
 		}
-
 		d.SetPartial("tags")
 	}
 
diff --git a/tencentcloud/resource_tc_cbs_storage.go b/tencentcloud/resource_tc_cbs_storage.go
index c16ebd0b9e..577e0406dc 100644
--- a/tencentcloud/resource_tc_cbs_storage.go
+++ b/tencentcloud/resource_tc_cbs_storage.go
@@ -173,18 +173,6 @@ func resourceTencentCloudCbsStorageCreate(d *schema.ResourceData, meta interface
 	if _, ok := d.GetOk("encrypt"); ok {
 		request.Encrypt = helper.String("ENCRYPT")
 	}
-	if v, ok := d.GetOk("tags"); ok {
-		tags := v.(map[string]interface{})
-		request.Tags = make([]*cbs.Tag, 0, len(tags))
-		for key, value := range tags {
-			tag := cbs.Tag{
-				Key:   helper.String(key),
-				Value: helper.String(value.(string)),
-			}
-			request.Tags = append(request.Tags, &tag)
-		}
-	}
-
 	chargeType := d.Get("charge_type").(string)
 	request.DiskChargeType = &chargeType
 
@@ -239,6 +227,14 @@ func resourceTencentCloudCbsStorageCreate(d *schema.ResourceData, meta interface
 	if err != nil {
 		return err
 	}
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("cvm", "volume", tcClient.Region, d.Id())
+		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
+			return err
+		}
+	}
 
 	return resourceTencentCloudCbsStorageRead(d, meta)
 }
@@ -279,7 +275,6 @@ func resourceTencentCloudCbsStorageRead(d *schema.ResourceData, meta interface{}
 	_ = d.Set("storage_name", storage.DiskName)
 	_ = d.Set("project_id", storage.Placement.ProjectId)
 	_ = d.Set("encrypt", storage.Encrypt)
-	_ = d.Set("tags", flattenCbsTagsMapping(storage.Tags))
 	_ = d.Set("storage_status", storage.DiskState)
 	_ = d.Set("attached", storage.Attached)
 	_ = d.Set("charge_type", storage.DiskChargeType)
@@ -289,6 +284,15 @@ func resourceTencentCloudCbsStorageRead(d *schema.ResourceData, meta interface{}
 		_ = d.Set("prepaid_renew_flag", storage.RenewFlag)
 	}
 
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "cvm", "volume", tcClient.Region, d.Id())
+	if err != nil {
+		return err
+	}
+
+	_ = d.Set("tags", tags)
+
 	return nil
 }
 
@@ -417,13 +421,13 @@ func resourceTencentCloudCbsStorageUpdate(d *schema.ResourceData, meta interface
 	}
 
 	if d.HasChange("tags") {
-		oldInterface, newInterface := d.GetChange("tags")
-		replaceTags, deleteTags := diffTags(oldInterface.(map[string]interface{}), newInterface.(map[string]interface{}))
-		tagService := TagService{
-			client: meta.(*TencentCloudClient).apiV3Conn,
-		}
-		region := meta.(*TencentCloudClient).apiV3Conn.Region
-		resourceName := fmt.Sprintf("qcs::cvm:%s:uin/:volume/%s", region, storageId)
+
+		oldValue, newValue := d.GetChange("tags")
+		replaceTags, deleteTags := diffTags(oldValue.(map[string]interface{}), newValue.(map[string]interface{}))
+
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("cvm", "volume", tcClient.Region, d.Id())
 		err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags)
 		if err != nil {
 			return err
diff --git a/tencentcloud/resource_tc_ccn.go b/tencentcloud/resource_tc_ccn.go
index df356007ac..8c0579e0ed 100644
--- a/tencentcloud/resource_tc_ccn.go
+++ b/tencentcloud/resource_tc_ccn.go
@@ -28,6 +28,7 @@ import (
 
 	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
 	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
+	"github.com/terraform-providers/terraform-provider-tencentcloud/tencentcloud/internal/helper"
 )
 
 func resourceTencentCloudCcn() *schema.Resource {
@@ -77,6 +78,11 @@ func resourceTencentCloudCcn() *schema.Resource {
 				Computed:    true,
 				Description: "Creation time of resource.",
 			},
+			"tags": {
+				Type:        schema.TypeMap,
+				Optional:    true,
+				Description: "Instance tag.",
+			},
 		},
 	}
 }
@@ -103,6 +109,15 @@ func resourceTencentCloudCcnCreate(d *schema.ResourceData, meta interface{}) err
 	}
 	d.SetId(info.ccnId)
 
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("vpc", "ccn", tcClient.Region, d.Id())
+		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
+			return err
+		}
+	}
+
 	return resourceTencentCloudCcnRead(d, meta)
 }
 
@@ -137,6 +152,14 @@ func resourceTencentCloudCcnRead(d *schema.ResourceData, meta interface{}) error
 	if err != nil {
 		return err
 	}
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "vpc", "ccn", tcClient.Region, d.Id())
+	if err != nil {
+		return err
+	}
+
+	_ = d.Set("tags", tags)
 	return nil
 }
 
@@ -152,9 +175,11 @@ func resourceTencentCloudCcnUpdate(d *schema.ResourceData, meta interface{}) err
 		name        = ""
 		description = ""
 		change      = false
+		changeList  = []string{}
 	)
 	if d.HasChange("name") {
 		name = d.Get("name").(string)
+		changeList = append(changeList, "name")
 		change = true
 	}
 
@@ -165,14 +190,35 @@ func resourceTencentCloudCcnUpdate(d *schema.ResourceData, meta interface{}) err
 		if description == "" {
 			return fmt.Errorf("can not set description='' ")
 		}
+		changeList = append(changeList, "description")
 		change = true
 	}
 
+	d.Partial(true)
 	if change {
 		if err := service.ModifyCcnAttribute(ctx, d.Id(), name, description); err != nil {
 			return err
 		}
+		for _, val := range changeList {
+			d.SetPartial(val)
+		}
+	}
+
+	if d.HasChange("tags") {
+
+		oldValue, newValue := d.GetChange("tags")
+		replaceTags, deleteTags := diffTags(oldValue.(map[string]interface{}), newValue.(map[string]interface{}))
+
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("vpc", "ccn", tcClient.Region, d.Id())
+		err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags)
+		if err != nil {
+			return err
+		}
+		d.SetPartial("tags")
 	}
+	d.Partial(false)
 	return resourceTencentCloudCcnRead(d, meta)
 }
 
diff --git a/tencentcloud/resource_tc_ccn_test.go b/tencentcloud/resource_tc_ccn_test.go
index ea34fbf343..7d688d57c0 100644
--- a/tencentcloud/resource_tc_ccn_test.go
+++ b/tencentcloud/resource_tc_ccn_test.go
@@ -35,6 +35,30 @@ func TestAccTencentCloudCcnV3Basic(t *testing.T) {
 				ImportState:       true,
 				ImportStateVerify: true,
 			},
+			// add tag
+			{
+				Config: testAccCcn_multiTags("master"),
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCcnExists(keyName),
+					resource.TestCheckResourceAttr(keyName, "tags.role", "master"),
+				),
+			},
+			// update tag
+			{
+				Config: testAccCcn_multiTags("master-version2"),
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCcnExists(keyName),
+					resource.TestCheckResourceAttr(keyName, "tags.role", "master-version2"),
+				),
+			},
+			// remove tag
+			{
+				Config: testAccCcnConfig,
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCcnExists(keyName),
+					resource.TestCheckNoResourceAttr(keyName, "tags.role"),
+				),
+			},
 		},
 	})
 }
@@ -131,6 +155,20 @@ resource tencentcloud_ccn main {
 }
 `
 
+func testAccCcn_multiTags(value string) string {
+	return fmt.Sprintf(
+		`
+resource tencentcloud_ccn main {
+	name        = "ci-temp-test-ccn"
+	description = "ci-temp-test-ccn-des"
+	qos         = "AG"
+	tags = {
+		role = "%s"
+	}
+}
+`, value)
+}
+
 const testAccCcnConfigUpdate = `
 resource tencentcloud_ccn main {
   name        = "ci-temp-test-ccn-update"
diff --git a/tencentcloud/resource_tc_cfs_file_system.go b/tencentcloud/resource_tc_cfs_file_system.go
index 826c5afdea..6105405900 100644
--- a/tencentcloud/resource_tc_cfs_file_system.go
+++ b/tencentcloud/resource_tc_cfs_file_system.go
@@ -98,6 +98,11 @@ func resourceTencentCloudCfsFileSystem() *schema.Resource {
 				Computed:    true,
 				Description: "Create time of the file system.",
 			},
+			"tags": {
+				Type:        schema.TypeMap,
+				Optional:    true,
+				Description: "Instance tags.",
+			},
 		},
 	}
 }
@@ -166,6 +171,14 @@ func resourceTencentCloudCfsFileSystemCreate(d *schema.ResourceData, meta interf
 	if err != nil {
 		return err
 	}
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("cfs", "filesystem", tcClient.Region, d.Id())
+		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
+			return err
+		}
+	}
 
 	return resourceTencentCloudCfsFileSystemRead(d, meta)
 }
@@ -220,6 +233,15 @@ func resourceTencentCloudCfsFileSystemRead(d *schema.ResourceData, meta interfac
 	if err != nil {
 		return err
 	}
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "cfs", "filesystem", tcClient.Region, d.Id())
+	if err != nil {
+		return err
+	}
+
+	_ = d.Set("tags", tags)
+
 	if mountTarget != nil {
 		_ = d.Set("vpc_id", mountTarget.VpcId)
 		_ = d.Set("subnet_id", mountTarget.SubnetId)
@@ -268,6 +290,21 @@ func resourceTencentCloudCfsFileSystemUpdate(d *schema.ResourceData, meta interf
 		d.SetPartial("access_group_id")
 	}
 
+	if d.HasChange("tags") {
+
+		oldValue, newValue := d.GetChange("tags")
+		replaceTags, deleteTags := diffTags(oldValue.(map[string]interface{}), newValue.(map[string]interface{}))
+
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("cfs", "filesystem", tcClient.Region, d.Id())
+		err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags)
+		if err != nil {
+			return err
+		}
+		d.SetPartial("tags")
+	}
+
 	d.Partial(false)
 
 	return resourceTencentCloudCfsFileSystemRead(d, meta)
diff --git a/tencentcloud/resource_tc_cfs_file_system_test.go b/tencentcloud/resource_tc_cfs_file_system_test.go
index d7b0dc9120..bb33684f4d 100644
--- a/tencentcloud/resource_tc_cfs_file_system_test.go
+++ b/tencentcloud/resource_tc_cfs_file_system_test.go
@@ -25,6 +25,30 @@ func TestAccTencentCloudCfsFileSystem(t *testing.T) {
 					resource.TestCheckResourceAttr("tencentcloud_cfs_file_system.foo", "protocol", "NFS"),
 				),
 			},
+			// add tag
+			{
+				Config: testAccCfsMasterInstance_multiTags("master"),
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCfsFileSystemExists("tencentcloud_cfs_file_system.foo"),
+					resource.TestCheckResourceAttr("tencentcloud_cfs_file_system.foo", "tags.role", "master"),
+				),
+			},
+			// update tag
+			{
+				Config: testAccCfsMasterInstance_multiTags("master-version2"),
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCfsFileSystemExists("tencentcloud_cfs_file_system.foo"),
+					resource.TestCheckResourceAttr("tencentcloud_cfs_file_system.foo", "tags.role", "master-version2"),
+				),
+			},
+			// remove tag
+			{
+				Config: testAccCfsFileSystem,
+				Check: resource.ComposeAggregateTestCheckFunc(
+					testAccCheckCfsFileSystemExists("tencentcloud_cfs_file_system.foo"),
+					resource.TestCheckNoResourceAttr("tencentcloud_cfs_file_system.foo", "tags.role"),
+				),
+			},
 		},
 	})
 }
@@ -101,6 +125,35 @@ resource "tencentcloud_vpc" "vpc" {
   cidr_block = "10.2.0.0/16"
 }
 
+resource "tencentcloud_cfs_access_group" "foo" {
+	name = "test_cfs_access_rule"
+}
+
+resource "tencentcloud_subnet" "subnet" {
+  vpc_id            = tencentcloud_vpc.vpc.id
+  name              = "test-cfs-subnet"
+  cidr_block        = "10.2.11.0/24"
+  availability_zone = "ap-guangzhou-3"
+}
+
+resource "tencentcloud_cfs_file_system" "foo" {
+  name = "test_cfs_file_system"
+  availability_zone = "ap-guangzhou-3"
+  access_group_id = tencentcloud_cfs_access_group.foo.id
+  protocol = "NFS"
+  vpc_id = tencentcloud_vpc.vpc.id
+  subnet_id = tencentcloud_subnet.subnet.id
+}
+`
+
+func testAccCfsMasterInstance_multiTags(value string) string {
+	return fmt.Sprintf(
+		`
+resource "tencentcloud_vpc" "vpc" {
+  name       = "test-cfs-vpc"
+  cidr_block = "10.2.0.0/16"
+}
+
 resource "tencentcloud_subnet" "subnet" {
   vpc_id            = tencentcloud_vpc.vpc.id
   name              = "test-cfs-subnet"
@@ -109,7 +162,7 @@ resource "tencentcloud_subnet" "subnet" {
 }
 
 resource "tencentcloud_cfs_access_group" "foo" {
-  name = "test_cfs_access_rule"
+	name = "test_cfs_access_rule"
 }
 
 resource "tencentcloud_cfs_file_system" "foo" {
@@ -119,5 +172,11 @@ resource "tencentcloud_cfs_file_system" "foo" {
   protocol = "NFS"
   vpc_id = tencentcloud_vpc.vpc.id
   subnet_id = tencentcloud_subnet.subnet.id
+  
+  tags = {
+	  test = "test-tf"
+	  role = "%s"
+  }
+}
+`, value)
 }
-`
diff --git a/tencentcloud/resource_tc_clb_instance.go b/tencentcloud/resource_tc_clb_instance.go
index be297d4991..bad110b02f 100644
--- a/tencentcloud/resource_tc_clb_instance.go
+++ b/tencentcloud/resource_tc_clb_instance.go
@@ -196,17 +196,6 @@ func resourceTencentCloudClbInstanceCreate(d *schema.ResourceData, meta interfac
 		}
 		request.SubnetId = helper.String(v.(string))
 	}
-	if v, ok := d.GetOk("tags"); ok {
-		tags := v.(map[string]interface{})
-		request.Tags = make([]*clb.TagInfo, 0, len(tags))
-		for key, value := range tags {
-			tag := clb.TagInfo{
-				TagKey:   helper.String(key),
-				TagValue: helper.String(value.(string)),
-			}
-			request.Tags = append(request.Tags, &tag)
-		}
-	}
 	clbId := ""
 	var response *clb.CreateLoadBalancerResponse
 	err := resource.Retry(writeRetryTimeout, func() *resource.RetryError {
@@ -294,6 +283,16 @@ func resourceTencentCloudClbInstanceCreate(d *schema.ResourceData, meta interfac
 			return err
 		}
 	}
+	ctx := context.WithValue(context.TODO(), logIdKey, logId)
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("clb", "loadbalancerid", tcClient.Region, d.Id())
+		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
+			return err
+		}
+	}
+
 	return resourceTencentCloudClbInstanceRead(d, meta)
 }
 
@@ -336,7 +335,15 @@ func resourceTencentCloudClbInstanceRead(d *schema.ResourceData, meta interface{
 	_ = d.Set("target_region_info_vpc_id", instance.TargetRegionInfo.VpcId)
 	_ = d.Set("project_id", instance.ProjectId)
 	_ = d.Set("security_groups", helper.StringsInterfaces(instance.SecureGroups))
-	_ = d.Set("tags", flattenClbTagsMapping(instance.Tags))
+
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "clb", "loadbalancerid", tcClient.Region, d.Id())
+	if err != nil {
+		return err
+	}
+
+	_ = d.Set("tags", tags)
 	return nil
 }
 
@@ -455,6 +462,21 @@ func resourceTencentCloudClbInstanceUpdate(d *schema.ResourceData, meta interfac
 		}
 		d.SetPartial("security_groups")
 	}
+	ctx := context.WithValue(context.TODO(), logIdKey, logId)
+	if d.HasChange("tags") {
+
+		oldValue, newValue := d.GetChange("tags")
+		replaceTags, deleteTags := diffTags(oldValue.(map[string]interface{}), newValue.(map[string]interface{}))
+
+		tcClient := meta.(*TencentCloudClient).apiV3Conn
+		tagService := &TagService{client: tcClient}
+		resourceName := BuildTagResourceName("clb", "loadbalancerid", tcClient.Region, d.Id())
+		err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags)
+		if err != nil {
+			return err
+		}
+		d.SetPartial("tags")
+	}
 	d.Partial(false)
 
 	return nil
diff --git a/tencentcloud/resource_tc_clb_instance_test.go b/tencentcloud/resource_tc_clb_instance_test.go
index c8913b8d2f..d849d2647f 100644
--- a/tencentcloud/resource_tc_clb_instance_test.go
+++ b/tencentcloud/resource_tc_clb_instance_test.go
@@ -90,6 +90,7 @@ func TestAccTencentCloudClbInstance_internal(t *testing.T) {
 					resource.TestCheckResourceAttr("tencentcloud_clb_instance.clb_internal", "project_id", "0"),
 					resource.TestCheckResourceAttrSet("tencentcloud_clb_instance.clb_internal", "vpc_id"),
 					resource.TestCheckResourceAttrSet("tencentcloud_clb_instance.clb_internal", "subnet_id"),
+					resource.TestCheckResourceAttr("tencentcloud_clb_instance.clb_internal", "tags.test", "tf1"),
 				),
 			},
 			{
diff --git a/tencentcloud/resource_tc_redis_instance.go b/tencentcloud/resource_tc_redis_instance.go
index 40c74bde18..109cc9dae9 100644
--- a/tencentcloud/resource_tc_redis_instance.go
+++ b/tencentcloud/resource_tc_redis_instance.go
@@ -31,7 +31,6 @@ package tencentcloud
 
 import (
 	"context"
-	"errors"
 	"fmt"
 	"log"
 	"sort"
@@ -235,7 +234,6 @@ func resourceTencentCloudRedisInstanceCreate(d *schema.ResourceData, meta interf
 	securityGroups := d.Get("security_groups").(*schema.Set).List()
 	projectId := d.Get("project_id").(int)
 	port := d.Get("port").(int)
-	tags := helper.GetTags(d, "tags")
 	chargeType := d.Get("charge_type").(string)
 	chargeTypeID := REDIS_CHARGE_TYPE_ID[chargeType]
 	var chargePeriod uint64 = 1
@@ -373,8 +371,8 @@ func resourceTencentCloudRedisInstanceCreate(d *schema.ResourceData, meta interf
 	}
 	d.SetId(redisId)
 
-	if len(tags) > 0 {
-		resourceName := BuildTagResourceName("redis", "instance", region, redisId)
+	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
+		resourceName := BuildTagResourceName("redis", "instance", region, d.Id())
 		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
 			return err
 		}
@@ -476,17 +474,13 @@ func resourceTencentCloudRedisInstanceRead(d *schema.ResourceData, meta interfac
 		}
 	}
 
-	tags := make(map[string]string, len(info.InstanceTags))
-	for _, tag := range info.InstanceTags {
-		if tag.TagKey == nil {
-			return errors.New("redis tag key is nil")
-		}
-		if tag.TagValue == nil {
-			return errors.New("redis tag value is nil")
-		}
-
-		tags[*tag.TagKey] = *tag.TagValue
+	tcClient := meta.(*TencentCloudClient).apiV3Conn
+	tagService := &TagService{client: tcClient}
+	tags, err := tagService.DescribeResourceTags(ctx, "redis", "instance", tcClient.Region, d.Id())
+	if err != nil {
+		return err
 	}
+
 	_ = d.Set("tags", tags)
 
 	_ = d.Set("charge_type", REDIS_CHARGE_TYPE_NAME[*info.BillingMode])
diff --git a/tencentcloud/resource_tc_redis_instance_test.go b/tencentcloud/resource_tc_redis_instance_test.go
index 841d187a50..b147591c02 100644
--- a/tencentcloud/resource_tc_redis_instance_test.go
+++ b/tencentcloud/resource_tc_redis_instance_test.go
@@ -184,8 +184,9 @@ resource "tencentcloud_redis_instance" "redis_instance_test" {
   port               = 6379
   redis_shard_num    = 1
   redis_replicas_num = 1
+
   tags = {
-    "test" = "test"
+    test = "test"
   }
 }`
 }
@@ -201,8 +202,9 @@ resource "tencentcloud_redis_instance" "redis_instance_test" {
   port               = 6379
   redis_shard_num    = 1
   redis_replicas_num = 1
+
   tags = {
-    "abc" = "abc"
+    abc = "abc"
   }
 }`
 }
@@ -218,8 +220,9 @@ resource "tencentcloud_redis_instance" "redis_instance_test" {
   port               = 6379
   redis_shard_num    = 1
   redis_replicas_num = 1
+  
   tags = {
-    "abc" = "abc"
+    abc = "abc"
   }
 }`
 }
diff --git a/tencentcloud/service_tencentcloud_cbs.go b/tencentcloud/service_tencentcloud_cbs.go
index c032e840a1..c115536b04 100644
--- a/tencentcloud/service_tencentcloud_cbs.go
+++ b/tencentcloud/service_tencentcloud_cbs.go
@@ -493,11 +493,3 @@ func (me *CbsService) ModifyDisksRenewFlag(ctx context.Context, storageId string
 	}
 	return nil
 }
-
-func flattenCbsTagsMapping(tags []*cbs.Tag) (mapping map[string]string) {
-	mapping = make(map[string]string)
-	for _, tag := range tags {
-		mapping[*tag.Key] = *tag.Value
-	}
-	return
-}
diff --git a/tencentcloud/service_tencentcloud_clb.go b/tencentcloud/service_tencentcloud_clb.go
index 549f4b365f..132f64a290 100644
--- a/tencentcloud/service_tencentcloud_clb.go
+++ b/tencentcloud/service_tencentcloud_clb.go
@@ -864,14 +864,6 @@ func waitForTaskFinish(requestId string, meta *clb.Client) (err error) {
 	return
 }
 
-func flattenClbTagsMapping(tags []*clb.TagInfo) (mapping map[string]string) {
-	mapping = make(map[string]string)
-	for _, tag := range tags {
-		mapping[*tag.TagKey] = *tag.TagValue
-	}
-	return
-}
-
 func flattenBackendList(list []*clb.Backend) (mapping []map[string]interface{}) {
 	result := make([]map[string]interface{}, 0, len(list))
 	for _, v := range list {
diff --git a/website/docs/r/ccn.html.markdown b/website/docs/r/ccn.html.markdown
index 8a0c213d80..7536d7e312 100644
--- a/website/docs/r/ccn.html.markdown
+++ b/website/docs/r/ccn.html.markdown
@@ -27,6 +27,7 @@ The following arguments are supported:
 * `name` - (Required) Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
 * `description` - (Optional) Description of CCN, and maximum length does not exceed 100 bytes.
 * `qos` - (Optional, ForceNew) Service quality of CCN, and the available value include 'PT', 'AU', 'AG'. The default is 'AU'.
+* `tags` - (Optional) Instance tag.
 
 ## Attributes Reference
 
diff --git a/website/docs/r/cfs_file_system.html.markdown b/website/docs/r/cfs_file_system.html.markdown
index f921b438de..a2e0d83f60 100644
--- a/website/docs/r/cfs_file_system.html.markdown
+++ b/website/docs/r/cfs_file_system.html.markdown
@@ -34,6 +34,7 @@ The following arguments are supported:
 * `mount_ip` - (Optional, ForceNew) IP of mount point.
 * `name` - (Optional) Name of a file system.
 * `protocol` - (Optional, ForceNew) File service protocol. Valid values are `NFS` and `CIFS`, and the default is `NFS`.
+* `tags` - (Optional) Instance tags.
 
 ## Attributes Reference
 
