# 技术架构说明（2024新版）

## 一、整体架构图

```mermaid
graph LR
    A[GitHub变更提交] --> B[变更捕获模块（git diff）]
    B --> C[AI风险分析服务]
    C --> D[风险决策引擎（OPA）]
    D -->|允许| E[自动部署模块]
    D -->|阻断| F[通知开发人员模块]
    D -->|警告| G[人工审核模块]
    C --> H[模型解释（LIME）]
    C --> I[结果可视化（Grafana）]
    F --> J[钉钉通知]
    G --> K[人工审核平台]
    E --> L[远程仓库自动部署]
```

## 二、模块说明

1. **变更捕获模块（git diff）**
   - 通过监听GitHub仓库变更，使用`git diff`捕获每次提交的差异内容。
   - 支持Webhook自动触发。

2. **AI风险分析服务**
   - 对捕获到的变更内容进行多层次分析：
     - **分类模型**：基于Scikit-learn，对变更内容进行风险分类。
     - **NLP模型**：基于Hugging Face Transformers（BERT），对变更文本进行语义理解和风险识别。
   - 输出风险等级、分析报告及特征解释。

3. **模型解释模块（LIME）**
   - 对AI模型的风险分析结果进行可解释性分析，帮助开发者理解模型决策依据。

4. **风险决策引擎（OPA）**
   - 基于OPA（Open Policy Agent）实现灵活的策略和规则管理。
   - 根据AI分析结果和策略规则，自动决策：允许、阻断或警告。

5. **自动部署模块**
   - 对于允许的变更，自动触发远程仓库的自动部署功能。

6. **通知开发人员模块**
   - 对于阻断的变更，通过钉钉等IM工具通知相关开发人员。

7. **人工审核模块**
   - 对于警告级别的变更，推送到人工审核平台，由人工确认后决定是否继续。

8. **结果可视化模块（Grafana）**
   - 将风险分析、决策、模型解释等结果推送到Grafana进行可视化展示，便于运维和管理。

## 三、数据流说明

- 开发人员提交代码或配置变更到GitHub仓库。
- 变更捕获模块通过`git diff`获取diff内容。
- AI风险分析服务（Scikit-learn分类模型+BERT NLP模型）对diff内容进行分析，输出风险等级和解释。
- 模型解释模块（LIME）对分析结果进行可解释性处理。
- 风险决策引擎（OPA）根据分析和规则做出决策：
  - 允许：自动部署
  - 阻断：通知开发人员
  - 警告：进入人工审核
- 所有分析和决策结果通过Grafana进行可视化。
- 通知和人工审核结果会影响最终是否部署。

## 四、关键技术选型

- **变更捕获**：GitHub Webhook、git diff
- **分类模型**：Scikit-learn
- **NLP模型**：Hugging Face Transformers（BERT）
- **模型解释**：LIME
- **规则引擎**：OPA（Open Policy Agent）
- **CI/CD集成**：远程仓库自带CI/CD（如GitHub Actions等）
- **通知系统**：钉钉开放平台API
- **人工审核**：Web平台（React/Vue前端 + Node.js/Go后端）
- **可视化**：Grafana

## 五、外部系统集成

- **GitHub**：通过Webhook触发变更捕获与分析
- **远程仓库**：自动部署与CI/CD
- **钉钉**：通过Webhook/机器人发送通知
- **Grafana**：展示分析与决策结果
- **云平台API**：对接阿里云、腾讯云API获取资源变更详情

---

如需进一步细化可补充各模块详细接口、部署架构等。 