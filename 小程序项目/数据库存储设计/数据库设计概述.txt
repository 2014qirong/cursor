# 商城小程序数据库设计概述

根据商城小程序的需求，我们需要设计一个能够支持前端小程序、后台管理系统以及API服务的数据库架构。以下是整体数据库设计的概述：

## 一、数据库选型

### 1. 主数据库：MySQL 8.0
- 成熟稳定，生态完善，社区活跃
- 支持事务，保证数据一致性
- 完善的索引机制，优化查询性能
- 支持存储过程、触发器等高级功能
- 良好的主从复制功能，便于读写分离

### 2. 缓存数据库：Redis 6.0
- 高性能的内存数据库，降低主库压力
- 支持多种数据结构：String, Hash, List, Set, Sorted Set
- 适用于缓存热点数据、会话管理、排行榜等场景
- 支持数据持久化，避免数据丢失
- 内置分布式锁，用于处理并发场景

### 3. 搜索引擎：Elasticsearch 7.x
- 全文搜索能力强，支持中文分词
- 高性能、分布式、可扩展
- 适用于商品搜索、日志分析等场景
- 支持复杂的聚合查询和过滤

## 二、数据库架构设计

### 1. 主从架构
- 一主多从架构，主库负责写操作，从库负责读操作
- 实现读写分离，提高系统吞吐量
- 从库作为热备份，提高系统可用性

### 2. 分库分表策略
- 按业务垂直分库：用户库、商品库、订单库、支付库
- 大表水平分表：订单表按时间范围分表，用户表按ID哈希分表
- 使用分布式ID生成器，确保全局唯一性

### 3. 多级缓存策略
- 本地缓存：应用服务器内存缓存热点数据
- Redis缓存：分布式缓存，存储会话、计数器等
- CDN缓存：存储静态资源，减轻服务器压力

## 三、表设计原则

### 1. 命名规范
- 表名使用小写字母，单词间用下划线分隔
- 表名使用单数形式，表示实体对象
- 主键统一命名为 id，外键命名为 entity_id
- 字段名使用小写字母，单词间用下划线分隔
- 索引命名规范：idx_字段名

### 2. 字段设计
- 尽量使用 UNSIGNED 属性，扩大数值范围
- 使用 INT 而非 VARCHAR 存储数字
- 使用 TIMESTAMP 存储时间，支持自动更新
- 合理使用 TEXT 和 VARCHAR，避免浪费空间
- 统一使用 UTF8MB4 字符集，支持完整 Unicode

### 3. 索引设计
- 为所有外键、常用查询条件创建索引
- 避免冗余索引，控制单表索引数量
- 合理使用联合索引，注意字段顺序
- 考虑查询模式，为排序、分组字段添加索引
- 定期分析索引使用情况，优化低效索引

### 4. 表关系
- 明确定义外键关系，保证数据完整性
- 一对多关系：在「多」的一方创建外键
- 多对多关系：创建中间表，存储双方主键
- 一对一关系：通常合并为一张表，或使用相同主键

## 四、备份与恢复策略

### 1. 备份周期
- 每日进行全量备份
- 每小时进行增量备份
- 事务日志实时备份

### 2. 备份方式
- 主库使用逻辑备份（mysqldump）
- 从库使用物理备份（XtraBackup）
- 关键数据使用双重备份，本地与云端同步

### 3. 恢复演练
- 每月进行一次恢复演练，验证备份有效性
- 制定详细的恢复流程文档，明确责任人
- 建立恢复时间目标（RTO）和恢复点目标（RPO）

## 五、性能优化措施

### 1. 查询优化
- 使用 EXPLAIN 分析查询执行计划
- 避免全表扫描，合理使用索引
- 控制查询范围，避免返回过多数据
- 优化JOIN操作，减少关联表数量
- 使用适当的SQL优化技巧，如子查询优化

### 2. 表设计优化
- 适当冗余设计，减少JOIN操作
- 大字段分离，使用垂直分表
- 历史数据归档，保持表数据量适中
- 合理设置字段默认值，减少NULL值

### 3. 硬件与配置优化
- 使用SSD存储，提高IO性能
- 增加服务器内存，扩大缓冲池
- 优化MySQL配置参数，如innodb_buffer_pool_size
- 定期进行表维护，如重建索引、优化表

## 六、环境配置设计

### 1. 环境分离策略
- **开发环境**：供开发人员使用，可频繁变更
- **测试环境**：用于功能测试和集成测试
- **预发布环境**：与生产环境配置一致，用于最终验证
- **生产环境**：面向用户的正式环境

### 2. 域名配置

#### 微信小程序前端
- **测试环境**: `test-mall.example.com`
- **生产环境**: `mall.example.com`

#### 后台管理系统
- **测试环境**: `test-admin.example.com`
- **生产环境**: `admin.example.com`

#### API服务
- **测试环境**: `test-api.example.com`
- **生产环境**: `api.example.com`

### 3. 数据库环境配置

#### 开发环境
```
HOST: localhost
PORT: 3306
USERNAME: dev_user
PASSWORD: dev_password
DATABASE: mall_dev
```

#### 测试环境
```
HOST: test-db.example.com
PORT: 3306
USERNAME: test_user
PASSWORD: test_password
DATABASE: mall_test
```

#### 生产环境
```
HOST: prod-db.example.com
PORT: 3306
USERNAME: prod_user
PASSWORD: prod_password
DATABASE: mall_prod
```

### 4. Redis环境配置

#### 开发环境
```
HOST: localhost
PORT: 6379
PASSWORD: 
DATABASE: 0
```

#### 测试环境
```
HOST: test-redis.example.com
PORT: 6379
PASSWORD: test_redis_pass
DATABASE: 0
```

#### 生产环境
```
HOST: prod-redis.example.com
PORT: 6379
PASSWORD: prod_redis_pass
DATABASE: 0
```

### 5. 环境特有功能配置

#### 测试环境特有功能
- 测试账号自动登录
- 接口Mock数据开关
- 接口调试日志记录
- 性能监控面板
- 数据重置功能

#### 生产环境特有功能
- 错误监控和报警机制
- 访问限流控制
- 数据库只读副本配置
- CDN资源分发
- 定期备份策略

### 6. 环境切换机制

#### 微信小程序
- 开发版、体验版对应测试环境
- 正式版对应生产环境
- 通过条件编译区分环境变量

#### 后台管理系统
- 使用不同的构建命令切换环境：
  ```
  npm run build:test    # 构建测试环境
  npm run build:prod    # 构建生产环境
  ```

#### API服务
- 使用环境变量NODE_ENV切换配置：
  ```
  NODE_ENV=development node app.js
  NODE_ENV=test node app.js
  NODE_ENV=production node app.js
  ```

### 7. Docker部署环境变量配置
```yaml
# docker-compose.yml
version: '3'
services:
  api:
    image: mall-api:${TAG:-latest}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ES_HOST=${ES_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - WECHAT_APPID=${WECHAT_APPID}
      - WECHAT_SECRET=${WECHAT_SECRET}
```

## 数据库表设计概览

根据需求，我们将数据分为以下几个主要模块：

1. 用户模块
2. 商品模块
3. 订单模块
4. 购物车模块
5. 支付模块
6. 营销模块
7. 系统设置模块

每个模块包含相应的数据表，用于存储相关信息。各表之间通过外键关系建立关联，确保数据的一致性和完整性。

## 缓存策略

为提高系统性能和用户体验，我们采用以下缓存策略：

1. 热门商品缓存：将热门商品信息缓存到Redis中，减轻数据库压力
2. 用户会话缓存：使用Redis存储用户登录状态和会话信息
3. 购物车缓存：用户购物车数据存储在Redis中，提高购物车操作的响应速度
4. 商品分类缓存：将商品分类树缓存到Redis中，加速分类查询
5. 首页数据缓存：轮播图、推荐商品等首页数据缓存在Redis中
6. 搜索热词缓存：热门搜索词缓存到Redis中

## 索引策略

为提高查询效率，我们将在以下字段上建立索引：

1. 所有表的主键（Primary Key）
2. 所有外键字段（Foreign Key）
3. 商品表的名称、价格、销量、创建时间字段
4. 订单表的状态、创建时间字段
5. 用户表的手机号、openid字段

## 分表策略

对于可能产生大量数据的表，我们采用以下分表策略：

1. 订单表：按时间范围分表，如orders_2023_01, orders_2023_02等
2. 订单详情表：与订单表保持一致的分表策略
3. 商品评价表：按商品ID范围分表

以下将详细设计各个数据表的结构、字段、索引等信息。 